type CourseInfo {
   courseId: String!
   courseName: String!
   instructorId: String!
}

type CourseContent {
   courseInfo: CourseInfo!
   missions: [Mission!]!
   targets: [Target!]!
}

input CourseInput {
   courseName: String!
   firstName: String!
   lastName: String!
}

type Student {
   studentId: String!
   firstName: String!
   lastName: String!
   courseId: String!
   instructorId: String!
   courseName: String!
   points: Int!,
   totalPointsAwarded: Int!,
   totalPointsSpent: Int!
}

input StudentInput {
   studentId: String!
   firstName: String!
   lastName: String!
   courseId: String!
   instructorId: String!
}

type Query {
   course(courseId: String!, instructorId: String!): CourseInfo!
   
   """
   Returns info on all courses associated with the user
   """
   courses: [CourseInfo!]!

   """
   DEPRECATED
   """
   courseContent(course: String!): CourseContent!

   """
   Returns information on a specific student associated with a course.
   """
   student(studentId: String, courseId: String!): Student!

   """ 
   Returns all students enrolled in a course
   """
   students(courseId: String!): [Student!]!
}

type Mutation {
   """
   Creates a new course associated with the instructor caller
   """
   createCourse(course: CourseInput!): CourseInfo!

   """
   Callable by both instructor and student roles, but with different
   values overridden by the authentication header.

   If called by student: overrides the student input

   If called by an instructor: overrides the instructor input
   """
   addStudent(student: StudentInput!): Student!
}