type Task {
  id: String!
  name: String!
  instructions: String!
  points: Int!
  startAt: Date
  endAt: Date
  dueDate: Date
  subMissionId: String
  objectiveId: String

  #might be other type of content
  pages: [Page!]!
  requirements: [RubricRequirement!]!
}

input TaskInput {
  name: String!
  instructions: String!
  points: Int!
  startAt: Date
  endAt: Date
  dueDate: Date
  subMissionId: String
  objectiveId: String
  pages: [PageInput!]!
  requirements: [RubricRequirementInput!]!
}

type Page {
   blocks: [TaskBlock]
   skippable: Boolean
}

input PageInput {
   blocks: [TaskBlockInput]
   skippable: Boolean
}

interface TaskBlock {
   title: String
}

input TaskBlockInput {
   title: String
   type: TaskBlockInputType!
   textBlockInput: TextBlockInput
   imageBlockInput: ImageBlockInput
   videoBlockInput: VideoBlockInput
}

type RubricRequirement {
   id: String!
   description: String
   isComplete: Boolean!
}

input RubricRequirementInput {
   description: String
}

type ImageBlock implements TaskBlock {
   title: String
   imageUrl: String!
}

input ImageBlockInput{
   imageUrl: String!
}

type TextBlock implements TaskBlock {
   title: String
   contents: String!
   fontSize: Int!
}

input TextBlockInput {
   contents: String!
   fontSize: Int!
}

type VideoBlock implements TaskBlock {
   title: String
   videoUrl: String!
}

input VideoBlockInput {
   videoUrl: String!
}


input TaskProgressInput {
   """
   The id of the task the user is submitting progress towards.
   """ 
   taskId: String!

   """
   The id if each requirement contained within each
   completed block
   """ 
   finishedRequirementIds: [String!]!
}

type Query {
  task(taskId: String): Task
  tasks(subMissionId: String): [Task!]!
}

type Mutation {
  addTask(task: TaskInput): String

  """
  Saves completed rubric requirements linked to this task for the user
  calling this function
  """
  submitTaskProgress(taskProgress: TaskProgressInput) : String
}

enum TaskBlockInputType {
   TEXT,
   IMAGE,
   VIDEO
}
