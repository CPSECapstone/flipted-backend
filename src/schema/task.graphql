type Task {
   id: String!
   name: String!
   instructions: String!
   points: Int!
   parentMissionId: String!
   parentMissionIndex: Int!
   startAt: Date
   endAt: Date
   dueDate: Date
   objectiveId: String
   pages: [Page!]!
   requirements: [RubricRequirement!]!
}

input TaskInput {
   name: String!
   instructions: String!
   points: Int!
   parentMissionId: String!
   parentMissionIndex: Int!
   startAt: Date
   endAt: Date
   dueDate: Date
   objectiveId: String
   pages: [PageInput]!
   requirements: [RubricRequirementInput]!
}

type Page {
   blocks: [TaskBlock]
   skippable: Boolean
}

input PageInput {
   skippable: Boolean
}

type RubricRequirement {
   id: String!
   description: String
   isComplete: Boolean!
}

input RubricRequirementInput {
   description: String
}

input TaskProgressInput {
   """
   The id of the task the user is submitting progress towards.
   """
   taskId: String!

   """
   The id if each requirement contained within each
   completed block
   """
   finishedRequirementIds: [String!]!
}

type Query {
   task(taskId: String): Task
   tasks(subMissionId: String): [Task!]!
}

type Mutation {
   addTask(task: TaskInput): String

   """
   Saves completed rubric requirements linked to this task for the user
   calling this function
   """
   submitTaskProgress(taskProgress: TaskProgressInput): String
}
