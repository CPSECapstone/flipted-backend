type Progress {
   taskId: String!
   status: Boolean!
}

type UserProgress {
   userName: String!
   progress: [Progress!]!
}

input ProgressInput {
   userName: String!
   course: String!
   taskId: String!
   status: Boolean!
}

input ProgresssDeletionInput {
   userName: String!
   course: String!
   taskId: String!
}

type ProgressOverview {
   userProgress: [UserProgress!]!
   courseInfo: CourseInfo!
   missions: [Mission!]!
   targets: [Target!]!
}

type MissionProgress {
   mission: Mission!
   progress: [TaskStats!]!
   student: String!
}

type TaskStats {
   taskId: String!
   name: String!
   username: String!

   """
   Null indicates that this task does not yet have an associated submission
   """
   submission: TaskSubmissionResult
}

type TargetProgress {
   target: Target!
   objectives: [ObjectiveProgress!]!
   student: String!
}

type ObjectiveProgress {
   objectiveId: String!
   objectiveName: String!
   tasks: [TaskObjectiveProgress!]!
}

type TaskObjectiveProgress {
   task: Task!
   objective: Objective!
   mastery: Mastery!
}

enum Mastery {
   NOT_GRADED
   NOT_MASTERED
   NEARLY_MASTERED
   MASTERED
}

type Query {
   progressByCourse(course: String!): [UserProgress!]!
   userProgress(userName: String!, course: String!): UserProgress!
   progressOverview(course: String!): ProgressOverview!

   getAllEnrolledStudentMissionProgress(courseId: String! missionId: String!) : [MissionProgress!]!
   getMissionProgress(missionId: String! username: String) : MissionProgress!
   getAllMissionProgress(courseId: String!, username: String) : [MissionProgress!]!
   getAllTargetProgress(courseId: String!, username: String) : [TargetProgress!]!
   getTaskObjectiveProgress(taskId: String!, username: String) : [TaskObjectiveProgress!]!
}

type Mutation {
   addProgress(progress: ProgressInput!): String!
   wipeAllProgress(username: String!) : String!
}
