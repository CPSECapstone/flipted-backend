type MarketListing {
   id: String!
   listingName: String!
   description: String!
   image: String!
   course: String!
   listedDate: Date!
   price: Int!
   stock: Int
   timesPurchased: Int!
}

input MarketListingInput {
   listingName: String!
   description: String!
   image: String!
   price: Int!
   stock: Int
}

"""
The student and listing objects contained in the receipt will reflect
the updated values as a result of the purchase.
"""
type Receipt {
   studentId: String!
   listingName: String!
   listingId: String!
   student: Student!
   listing: MarketListing!
   receiptId: String!
   course: String!
   note: String!
   purchaseDate: Date!
   pointsSpent: Int!
   quantity: Int!
   fulfilled: Boolean!
}

type Activity {
   studentId: String!
   course: String!
   note: String!
   activityDate: Date!
   pointChange: Int!
}

type Query {
   marketListings(course: String!): [MarketListing!]!
   
   """
   If the student field is null or this API is called by a student, it will only return that student's purchases.
   Otherwise, it will return all for that course.

   Will only return the most recent N purchased passed into the fetch parameter 
   """
   recentPurchases(course: String!, student: String, fetch: Int!) : [Receipt!]!
   recentActivity(course: String!, student: String, fetch: Int!) : [Activity!]!
   unfulfilledPurchases(course: String!, student: String) : [Receipt!]!
}

type Mutation {
   removeStudent(course: String! student: String!) : String!
   blockStudentPurchases(course: String! student: String!, blocked: Boolean!) : Student!
   setStudentAdmin(course: String! student: String!, admin: Boolean!) : Student!
   refundPurchase(course: String! receiptId: String!) : Boolean!
   fulfillPurchase(course: String! receiptId: String! fulfilled: Boolean!) : Receipt!
   purchase(course: String!, listingId: String!, quantity: Int!, note: String!) : Receipt!
   editMarketListing(course: String!, id: String!, listing: MarketListingInput!): MarketListing!
   addMarketListing(course: String!, listing: MarketListingInput!): MarketListing!
   removeMarketListing(course: String!, id: String!): String!
   awardStudentPoints(courseId: String!, student: String!, points: Int!): Student!
   awardStudentsPoints(courseId: String!, studentIds: [String!]!, points: Int!) : [Student!]!
}
